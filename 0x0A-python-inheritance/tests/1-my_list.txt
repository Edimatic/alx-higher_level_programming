The ``MyList`` class
====================

Creating ``MyList``
--------------------

Importing class from the module:
    >>> MyList = __import__('0-my_list').MyList


Creating an instance and printing the sorted list:
    >>> my_list = MyList([4, 2, 8, 1, 7])
    >>> print(my_list)
    [4, 2, 8, 1, 7]

    >>> my_list.print_sorted()
    [1, 2, 4, 7, 8]


Creating an instance with an empty list and printing the sorted list:
    >>> empty_list = MyList()
    >>> print(empty_list)
    []

    >>> empty_list.print_sorted()
    []


Creating an instance with a list of negative integers and printing the sorted list:
    >>> negative_list = MyList([-4, -2, -8, -1, -7])
    >>> print(negative_list)
    [-4, -2, -8, -1, -7]

    >>> negative_list.print_sorted()
    [-8, -7, -4, -2, -1]

Testing the behavior with non-integer elements:
    >>> mixed_list = MyList([4, 'hello', 2, 'world'])
    >>> print(mixed_list)
    [4, 'hello', 2, 'world']

    >>> mixed_list.print_sorted()
    Traceback (most recent call last):
        ...
    TypeError: '<' not supported between instances of 'str' and 'int'


Testing the behavior with non-list argument:
    >>> non_list = MyList('not a list')
    Traceback (most recent call last):
        ...
    TypeError: 'str' object is not callable


Testing the behavior with floating-point numbers:
    >>> float_list = MyList([4.5, 2.3, 8.1, 1.0, 7.7])
    >>> print(float_list)
    [4.5, 2.3, 8.1, 1.0, 7.7]

    >>> float_list.print_sorted()
    [1.0, 2.3, 4.5, 7.7, 8.1]


Testing the behavior with repeated elements:
    >>> repeated_list = MyList([4, 2, 8, 1, 7, 4, 2, 8])
    >>> print(repeated_list)
    [4, 2, 8, 1, 7, 4, 2, 8]

    >>> repeated_list.print_sorted()
    [1, 2, 4, 7, 8, 1, 2, 4]
